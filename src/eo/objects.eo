+package org.jpeek.calculus.eo

# ===================================================================
# Class object
# name - class name
# methods - array of method objects
# atts - array of attrribute objects of the class
[name methods atts] > class
  name > @
# ===================================================================
# Method object
# name - method name
# args - array of argument types of the method
# atts - array of attrribute objects used by method
# calls - array of method calls of the method
[name args atts calls] > method
  name > @
# ===================================================================
# Attrribute object
# name - attrribute name
[name] > att
  name > @
# ===================================================================
# Index pair
[i j] > iPair
  [pairArray] > inArray
    [i imax] > paLoop
      if. > @
        i.geq imax
        false
        or.
          ^.^.eq
            ^.pairArray.get i
          paLoop
            i.add 1
            imax

    and. > @
      pairArray.length.greater 0
      paLoop
        0
        pairArray.length

  [p] > eq
    or. > @
      and.
        eq.
          ^.i
          p.i
        eq.
          ^.j
          p.j
      and.
        eq.
          ^.i
          p.j
        eq.
          ^.j
          p.i

  not. > @
    eq.
      i
      j
# ===================================================================
# is Attribute used by method
# a - attribute object
# m - method object
[a m] > isAUsedByM
  [i imax] > attsLoop
    if. > @
      i.geq imax
      false
      if.
        eq.
          (^.m.atts.get i).name
          ^.a.name
        true
        attsLoop
          i.add 1
          imax
  attsLoop > @
    0
    m.atts.length
# ===================================================================
# Has or not 2 methods of a class direct connectivity
# m1, m2 method objects
[m1 m2] > hasDirectConnectivity
  [i imax j jmax] > attLoop
    if. > @
      i.geq imax
      false
      if.
        j.geq jmax
        attLoop
          i.add 1
          imax
          0
          jmax
        if.
          eq.
            name.
              ^.m1.atts.get
                i
            name.
              ^.m2.atts.get
                j
          true
          attLoop
            i
            imax
            j.add 1
            jmax
  if. > @
    and.
      m1.atts.length.greater 0
      m2.atts.length.greater 0
    attLoop
      0
      m1.atts.length
      0
      m2.atts.length
    false
# ===================================================================
[methods] > getDirectConnectPairs
  [i j imax] > dcpLoop
    if. > @
      i.geq
        imax.sub 1
      *
      if.
        j.geq
          imax
        dcpLoop
          i.add 1
          i.add 2
          imax
        appendAll.
          dcpLoop
            i
            j.add 1
            imax
          if.
            hasDirectConnectivity
              ^.methods.get i
              ^.methods.get j
            *
              iPair i j
            *
  if. > @
    less.
      methods.length
      2
    *
    dcpLoop
      0
      1
      methods.length
# ===================================================================
[methods] > getConnectedPairs
  getDirectConnectPairs > dcp!
    methods

  [pairs] > getAllPairs
    [] > newPairs!
      [i j imax] > npLoop
        (^.^.pairs.get i) > pairI!
        (^.^.pairs.get j) > pairJ!
        if. > newPair!
          eq.
            pairI.i
            pairJ.i
          iPair
            pairI.j
            pairJ.j
          if.
            eq.
              pairI.j
              pairJ.j
            iPair
              pairI.i
              pairJ.i
            if.
              eq.
                pairI.i
                pairJ.j
              iPair
                pairI.j
                pairJ.i
              if.
                eq.
                  pairI.j
                  pairJ.i
                iPair
                  pairI.i
                  pairJ.j
                iPair
                  i
                  i
        if. > @
          geq.
            i
            imax.sub
              1
          *
          if.
            j.geq imax
            npLoop
              i.add 1
              i.add 2
              imax
            appendAll.
              npLoop
                i
                j.add 1
                imax
              if.
                newPair
                *
                  newPair
                *

      if. > @
        ^.pairs.length.less 2
        *
        npLoop
          0
          1
          ^.pairs.length

    [] > joinedPairs!
      [i imax] > joinLoop
        (^.^.newPairs.get i) > pairI!
        joinLoop > otherPairs!
          i.add 1
          imax
        if. > @
          i.geq imax
          *
          appendAll.
            otherPairs
            if.
              and.
                pairI
                not.
                  or.
                    pairI.inArray
                      otherPairs
                    pairI.inArray
                      ^.^.pairs
              *
                pairI
              *
      if. > @
        ^.newPairs.length.eq 0
        ^.pairs
        joinLoop
          0
          ^.newPairs.length
    if. > @
      or.
        newPairs.length.eq 0
        joinedPairs.length.eq 0
      pairs
      getAllPairs
        appendAll.
          pairs
          joinedPairs

  if. > @
    less.
      methods.length
      2
    *
    getAllPairs dcp
# ===================================================================
#  maximum possible number of direct or indirect connections
#  methods - array of method objects
[methods] > np
  if. > @
    methods.length.less 2
    0
    div.
      mul.
        methods.length
        sub.
          methods.length
          1
      2
# ===================================================================
#  number of direct connections
#  methods - array of method objects
[methods] > ndc
  [i j imax] > methodsLoop
    if. > @
      i.geq (imax.sub 1)
      0
      if.
        j.geq imax
        methodsLoop
          i.add 1
          i.add 2
          imax
        add.
          if.
            hasDirectConnectivity
              ^.methods.get
                i
              ^.methods.get
                j
            1
            0
          methodsLoop
            i
            j.add 1
            imax
  if. > @
    methods.length.less 2
    0
    methodsLoop
      0
      1
      methods.length
# ===================================================================
[arr element] > count
  reduce. > @
    arr
    0
    []
      [accum current] > reduce
        if. > @
          eq.
            current
            ^.^.element
          add.
            accum
            1
          accum
# ===================================================================
[arr] > unique
  reduce. > @
    arr
    *
    []
      [accum current] > reduce
        if. > @
          greater.
            count
              accum
              current
            0
          accum
          append.
            accum
            current
